#!/usr/bin/env python
#
 
from __future__ import print_function
import rospy
from sensor_msgs.msg import JointState
 
from markers import *
from funciones_proyecto import *
 
## --------------------------------------------------------
 
# Initialize the node
rospy.init_node("testKineControlPosition")
print('starting motion ... ')
# Publisher: publish to the joint_states topic
pub = rospy.Publisher('joint_states', JointState, queue_size=10)
 
## --------------------------------------------------------
 
# Markers for the current and desired positions
bmarker_current  = BallMarker(color['RED'])
bmarker_desired = BallMarker(color['GREEN'])
 
# Joint names
jnames = ['joint_1', 'joint_2', 'joint_3','joint_4', 'joint_5', 'joint_6', 'joint_7']
 
# Posicion deseada
xd = np.array([0.8, 0.5, 0.4])
# Initial configuration
q0  = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
 
# Resulting initial position (end effector with respect to the base link)
T = fkine(q0)
x0 = T[0:3,3]
 
# Red marker shows the achieved position
bmarker_current.xyz(x0)
# Green marker shows the desired position
bmarker_desired.xyz(xd)
 
# Instance of the JointState message
jstate = JointState()
# Values of the message
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames
# Add the head joint value (with value 0) to the joints
jstate.position = q0
 
# Frequency (in Hz) and control period 
freq = 200
dt = 1.0/freq
rate = rospy.Rate(freq)
 
# Initial joint configuration
q = copy(q0)
 
## --------------------------------------------------------
 
# Ganacia cinematica
k = 0.5
 
## --------------------------------------------------------
# Main loop
while not rospy.is_shutdown():
    # Current time (needed for ROS)
    jstate.header.stamp = rospy.Time.now()
 
    # Kinematic control law for position -------------------
    
    # Jacobiano para la configuracion actual del efector final
    J = jacobian_position(q,delta=0.0001)
 
    # Cinematica directa dada la configuracion actual de q
    T_qact = fkine(q)
    
    # Extraccion de las coordenadas de posicion
    x = T_qact[0:3,3]
 
    # Error en la posicion de ajuste
    e = x - xd
    
    # Derivada del error
    de = -k*e
 
    # Diferencial de la configuracion articular
    dq = np.linalg.pinv(J).dot(de)
 
    # Integracion de Euler
    q = q + dt*dq
    ## --------------------------------------------------------
    
    # Publish the message
    jstate.position = q
    pub.publish(jstate)
    bmarker_desired.xyz(xd)
    bmarker_current.xyz(x)
    # Wait for the next iteration
    rate.sleep()
 
print('ending motion ...')